from os import walk
import pandas as pd
import json as json

def read_smartbugs_curated_dataset() -> pd.DataFrame:
    """Read the smartbug curated dataset and create a DataFrame"""
    programs = []
    path = "smartbugs-curated/dataset/all_normalized"
    contract_texts = []
    contract_text = ""
    filenames = next(walk(path), (None, None, []))[2]  # [] if no file
    for i,filename in enumerate(filenames):
        file = open(path+"/"+filename, "r")
        content = file.read()
        programs.append(content)
        file.close()
        
    smart_contracts_programs_df =  pd.DataFrame({"contract_name":filenames,"contract_code":programs})
    return smart_contracts_programs_df


def read_ethereum_smart_contracts() -> pd.DataFrame:
    conracts_data_dict = {}
    foldernames = next(walk("ethereum_smart_contracts/"), (None, None, []))[1]  
    for foldername in foldernames:
        splited = foldername.split("_")
        vulnerability = "_".join(splited[:-1])
        path = "ethereum_smart_contracts/" + foldername
        filenames = next(walk(path), (None, None, []))[2]
        for filename in filenames:
            try: 
                
                contract_name = "ethereum_" + filename
                if contract_name in conracts_data_dict.keys(): 
                    conracts_data_dict[contract_name][1].append(vulnerability)
                else:
                    # add contract data
                    file = open(path+"/"+filename, "r")
                    content = file.read()
                    conracts_data_dict[contract_name] = [content, [vulnerability]]
                    file.close()
            except:
                print(path+"/"+filename)
    # return a dataframe with all the data
    contact_names = conracts_data_dict.keys()
    contracts_data = [conracts_data_dict[k][0] for k in conracts_data_dict.keys()]
    contract_vulnerabilities = [conracts_data_dict[k][1] for k in conracts_data_dict.keys()]
    del(conracts_data_dict)
    return pd.DataFrame({"contact_name":contact_names,"contract_code":contracts_data,"vulnerabilities":contract_vulnerabilities})


def extract_smartbugs_curated_vulnerabilities() -> pd.DataFrame: 
    f = open('smartbugs-curated/vulnerabilities.json')
    vulnerabilities_data = json.load(f)

    vulnerabilities = set()
    contracts = {}

    for i in range(len(vulnerabilities_data)):
        val = vulnerabilities_data[i]
        for item in val["vulnerabilities"]:
            vulnerabilities.add(item["category"])
    f.close()
            
    print(f"total contract: {len(vulnerabilities_data)}\n")
    print("vulnerabilities categories found:")
    for i, val in enumerate(vulnerabilities):
        print(f'{i+1}.{val}')
    
    # Create DataFrame with all the contracts name and their vulnerabilities
    df_data = {"contract_name":[],"vulnerabilities_description":[]}
    for v in vulnerabilities:
        df_data[v+"_vulnerability"] = []
        
    for val in vulnerabilities_data:
        df_data["contract_name"].append(val["name"])
        df_data["vulnerabilities_description"].append(val["vulnerabilities"])
        for vul in vulnerabilities:
            if vul in str(val["vulnerabilities"]):
                df_data[vul+"_vulnerability"].append(1)
            else:
                df_data[vul+"_vulnerability"].append(0)
                
    contract_data = pd.DataFrame(df_data)
    del(df_data)
    cols = []
    for x in contract_data.columns:
        if x == "short_addresses_vulnerability":
            cols.append("short_address_attack_vulnerability")
        elif x == "unchecked_low_level_calls_vulnerability":
            cols.append("unchecked_return_values_vulnerability")
        else:
            cols.append(x)
    contract_data.columns = cols
    # contract_data.to_csv("smart_contracts_data.csv",index=False)
    return contract_data