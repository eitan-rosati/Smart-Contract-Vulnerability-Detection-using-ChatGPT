def detect_reentrancy(code):
    reentrancy_patterns = ["call.value(", "call{value:"]
    mutex_patterns = ["bool mutex", "require(!mutex", "mutex = true;", "mutex = false;"]
    is_reentrant = any(pattern in code for pattern in reentrancy_patterns)
    has_mutex = any(mutex in code for mutex in mutex_patterns)
    return is_reentrant and not has_mutex

def detect_timestamp_dependency(code):
    uses_timestamp = "block.timestamp" in code
    critical_usage = uses_timestamp and ("<" in code or ">" in code or "==" in code)
    randomness = "random" in code and uses_timestamp
    return uses_timestamp and (critical_usage or randomness)

def detect_integer_overflow(code):
    overflow_patterns = ["+", "-", "*", "/", "%"]
    safe_math_patterns = ["SafeMath", "add(", "sub(", "mul(", "div(", "mod("]
    is_overflow_risk = any(op in code for op in overflow_patterns)
    uses_safe_math = any(safe in code for safe in safe_math_patterns)
    return is_overflow_risk and not uses_safe_math

def detect_unchecked_external_call(code):
    external_call_patterns = ["call(", "delegatecall(", "send(", "transfer("]
    return_value_check_patterns = ["require(", "assert(", "if ("]
    makes_external_call = any(call in code for call in external_call_patterns)
    checks_return_value = any(check in code for check in return_value_check_patterns)
    return makes_external_call and not checks_return_value

# Re-run the analysis with refined detection functions
analysis_results_refined = []

for index, row in contracts_df.iterrows():
    contract_name = row['contract_name']
    contract_code = row['contract_code']
    
    reentrancy = detect_reentrancy(contract_code)
    timestamp_dependency = detect_timestamp_dependency(contract_code)
    integer_overflow = detect_integer_overflow(contract_code)
    unchecked_external_call = detect_unchecked_external_call(contract_code)
    
    # Create description for each vulnerability detected
    description = []
    if reentrancy:
        description.append("Reentrancy: Potential reentrancy issue detected without proper mutex.")
    if timestamp_dependency:
        description.append("Timestamp Dependency: Potential misuse of block.timestamp in critical conditions.")
    if integer_overflow:
        description.append("Integer Overflow: Detected arithmetic operations without safe math checks.")
    if unchecked_external_call:
        description.append("Unchecked External Call: External call detected without proper return value handling.")
    
    description_text = " ".join(description) if description else "No vulnerabilities detected."
    
    analysis_results_refined.append({
        "contract_name": contract_name,
        "description": description_text,
        "Reentrancy": int(reentrancy),
        "Timestamp Dependency": int(timestamp_dependency),
        "Integer Overflow": int(integer_overflow),
        "Unchecked External Call": int(unchecked_external_call)
    })

# Convert the refined results to a DataFrame
results_df_refined = pd.DataFrame(analysis_results_refined)

# Save the refined results to a new CSV file
output_file_path_refined = "/mnt/data/smart_contract_analysis_results_refined.csv"
results_df_refined.to_csv(output_file_path_refined, index=False)
